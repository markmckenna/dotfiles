[user]
	name = Mark McKenna
	email = mark.mckenna@redspace.com
	signingkey = 060AD062D4ED3DB0F49F347EDBE0F600906313D0

[alias]
	# View the current working tree status using the short format
	glance = status -s

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

    new-branch = "!f() { git checkout -b $1 && git push origin -u $1; }; f"

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

    # Commit as a fixup
    fixup = commit --fixup head

    # Forcibly commit everything in the sandbox with a 'WIP' label
    checkpoint = !git add . && git commit --no-verify -m 'WIP'

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Find branches containing commit
	find-branch-by-commit = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	find-tag-by-commit = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	find-commit-by-code = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	find-commit-by-message = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	delete-merged = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

    # Prune tags
    prune-tags = !git tag -l | xargs git tag -d && git fetch -t
    prune-branches = remote prune origin

	lol = log --graph --decorate --pretty=oneline --abbrev-commit --all
	vlol = log --graph --decorate --pretty='%C(yellow)% h%Creset%<(80,trunc)% s%Cgreen% cr%Cred% cN%Cblue% d' --abbrev-commit --all

    update = !git fetch && git remote prune origin

    # Interactively rebase the listed branch onto origin/develop
    rebase-to-develop = "!git update && git rebase -i origin/develop"

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	autocrlf = input
	ignorecase = false

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[diff]

	# Detect copies as well as renames
	renames = copies

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]

	# Include summaries of merged commits in newly created merge commit messages
	log = true
	defaultToUpstream = true

[push]
	default = upstream
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = false

#[filter "media"]
#	clean = git-media-clean %f
#	smudge = git-media-smudge %f
#[filter "tabspace"]
#	smudge = gexpand --tabs=4 --initial
#	clean = gexpand --tabs=4 --initial

# URL shorthands

[url "git@github.com:"]

	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

	insteadOf = "github:"

[url "git@gist.github.com:"]

	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

	insteadOf = "gist:"
[rebase]
	autosquash = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	required = true
[commit]
	gpgsign = true
